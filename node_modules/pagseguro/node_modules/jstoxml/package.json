{
  "name": "jstoxml",
  "version": "0.1.0",
  "description": "Everyone loves JSON, and the world is moving that direction, but we still need things outputted in XML!  Particularly for RSS and Podcast feeds.  jstoxml makes it easy to contruct those feeds in JavaScript and output them to XML",
  "homepage": "http://github.com/davidcalhoun/jstoxml",
  "main": "./jstoxml.js",
  "author": {
    "name": "David Calhoun",
    "email": "david.b.calhoun@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/davidcalhoun/jstoxml"
  },
  "engines": {
    "node": ">=0.2.0"
  },
  "readme": "jstoxml\n=========\n\n### Version 0.1.0\n* Added support for custom filters (for XML, UTF-8 entities, or whatever you need it for)\n* Changed to a single options object, passed as the second parameter.  This will break older versions that use the XML header or indentation!  They will need to be updated (see the examples below).\n\n\n### Convert native JavaScript objects (JSON) to XML\n\nEveryone loves JSON, and the world is moving that direction, but we still need things outputted in XML!  Particularly for [RSS feeds](http://www.rssboard.org/rss-specification) and [Podcasts](http://www.apple.com/itunes/podcasts/specs.html).\n\nThis is inspired by [node-jsontoxml](https://github.com/soldair/node-jsontoxml), which was found to be a bit too rough around the edges.  jstoxml attempts to fix that by being more flexible.\n\n### Features\n* supports a variety of inputs: objects, arrays, strings, \n* tabbed output (optional)\n\n### Installation\n* npm install jstoxml\n\n### Examples\nFirst you'll want to require jstoxml in your script, and assign the result to the namespace variable you want to use (in this case jstoxml):\n\n```javascript\nvar jstoxml = require('jstoxml');\n```\n\n#### Interface\njstoxml has a very simple interface: jstoxml.toXML(input, addHeader [Boolean], indent [String]);\n\n* input: accepts objects, arrays, strings, and even functions\n* addHeader (optional): pass in true to include the XML header (&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;)\n* indent (optional): string which is used as an indent (i.e. '  ')\n\n\n#### Example 1: Simple object\n```javascript\njstoxml.toXML({\n  foo: 'bar',\n  foo2: 'bar2'\n});\n```\nOutput:\n\n```\n<foo>bar</foo><foo2>bar2</foo2>\n```\n\n\n#### Example 2: Simple array\n```javascript\njstoxml.toXML([\n  {foo: 'bar'},\n  {foo2: 'bar2'}\n]);\n```\nOutput:\n\n```\n<foo>bar</foo><foo2>bar2</foo2>\n```\n\n\n#### Example 3: Duplicate tag names\nBecause we can't have duplicate keys in objects, we have to take advantage of arrays to get duplicate tag names:\n\n```javascript\njstoxml.toXML([\n  {foo: 'bar'},\n  {foo: 'bar2'}\n]);\n```\nOutput:\n\n```\n<foo>bar</foo><foo>bar2</foo>\n```\n\n\n#### Example 4: Attributes\n```javascript\njstoxml.toXML({\n  _name: 'foo',\n  _content: 'bar',\n  _attrs: {\n    a: 'b',\n    c: 'd'\n  }\n});\n```\nOutput:\n\n```\n<foo a=\"b\" c=\"d\">bar</foo>\n```\n\n\n#### Example 5: Tags mixed with text content\nTo output text content, set a key to an empty string value:\n\n```javascript\njstoxml.toXML({\n  'text1': '',\n  foo: 'bar',\n  'text2': ''\n});\n\n```\nOutput:\n\n```\ntext1<foo>bar</foo>text2\n```\n\n\n#### Example 6: Nested tags (with indenting)\n\n```javascript\njstoxml.toXML({\n  a: {\n    foo: 'bar',\n    foo2: 'bar2'\n  }\n}, {header: false, indent: '  '});\n```\nOutput:\n\n```\n<a>\n  <foo>bar</foo>\n  <foo2>bar2</foo2>\n</a>\n```\n\n\n#### Example 7: Nested tags with attributes (with indenting)\n```javascript\njstoxml.toXML({\n  ooo: {\n    _name: 'foo',\n    _attrs: {\n      a: 'b'\n    },\n    _content: {\n      _name: 'bar',\n      _attrs: {\n        c: 'd'\n      }\n    }\n  }\n}, {header: false, indent: '  '});\n```\nOutput:\n\n```\n<ooo>\n  <foo a=\"b\">\n    <bar c=\"d\"/>\n  </foo>\n</ooo>\n```\n\nNote that cases like this might be especially hard to read because of the deep nesting, so it's recommend you use something like this pattern instead, which breaks it up into more readable pieces:\n\n```javascript\nvar bar = {\n  _name: 'bar',\n  _attrs: {\n    c: 'd'\n  }\n};\n\nvar foo = {\n  _name: 'foo',\n  _attrs: {\n    a: 'b'\n  },\n  _content: bar\n}\n\nreturn jstoxml.toXML({\n  ooo: foo\n}, {header: false, indent: '  '})\n```\n\n\n#### Example 8: Functions\n```javascript\njstoxml.toXML({\n  onePlusTwo: function(){\n    return 1 + 2;\n  },\n  date: function(){\n    return new Date();\n  }\n});\n```\nOutput:\n\n```\n<onePlusTwo>3</onePlusTwo><date>Sat Jul 30 2011 17:49:52 GMT+0900 (JST)</date>\n```\n\n#### Example 9: RSS Feed\n```javascript\njstoxml.toXML({\n  _name: 'rss',\n  _attrs: {\n    version: '2.0'\n  },\n  _content: {\n    channel: [\n      {title: 'RSS Example'},\n      {description: 'Description'},\n      {link: 'google.com'},\n      {lastBuildDate: function(){\n        return new Date();\n      }},\n      {pubDate: function(){\n        return new Date();\n      }},\n      {language: 'en'},\n      {item: {\n        title: 'Item title',\n        link: 'Item link',\n        description: 'Item Description',\n        pubDate: function(){\n          return new Date();\n        }\n      }},\n      {item: {\n        title: 'Item2 title',\n        link: 'Item2 link',\n        description: 'Item2 Description',\n        pubDate: function(){\n          return new Date();\n        }\n      }}\n    ]\n  }\n}, {header: true, indent: '  '});\n```\nOutput:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\">\n  <channel>\n    <title>RSS Example</title>\n    <description>Description</description>\n    <link>google.com</link>\n    <lastBuildDate>Sat Jul 30 2011 18:14:25 GMT+0900 (JST)</lastBuildDate>\n    <pubDate>Sat Jul 30 2011 18:14:25 GMT+0900 (JST)</pubDate>\n    <language>en</language>\n    <item>\n      <title>Item title</title>\n      <link>Item link</link>\n      <description>Item Description</description>\n      <pubDate>Sat Jul 30 2011 18:33:47 GMT+0900 (JST)</pubDate>\n    </item>\n    <item>\n      <title>Item2 title</title>\n      <link>Item2 link</link>\n      <description>Item2 Description</description>\n      <pubDate>Sat Jul 30 2011 18:33:47 GMT+0900 (JST)</pubDate>\n    </item>\n  </channel>\n</rss>\n```\n\n\n#### Example 10: Podcast RSS Feed\n(see the [Apple docs](http://www.apple.com/itunes/podcasts/specs.html) for more information)\n\n```javascript\njstoxml.toXML({\n  _name: 'rss',\n  _attrs: {\n    'xmlns:itunes': 'http://www.itunes.com/dtds/podcast-1.0.dtd',\n    version: '2.0'\n  },\n  _content: {\n    channel: [\n      {title: 'Title'},\n      {link: 'google.com'},\n      {language: 'en-us'},\n      {copyright: 'Copyright 2011'},\n      {'itunes:subtitle': 'Subtitle'},\n      {'itunes:author': 'Author'},\n      {'itunes:summary': 'Summary'},\n      {description: 'Description'},\n      {'itunes:owner': {\n        'itunes:name': 'Name',\n        'itunes:email': 'Email'\n      }},\n      {\n        _name: 'itunes:image',\n        _attrs: {\n          href: 'image.jpg'\n        }\n      },\n      {\n        _name: 'itunes:category',\n        _attrs: {\n          text: 'Technology'\n        },\n        _content: {\n          _name: 'itunes:category',\n          _attrs: {\n            text: 'Gadgets'\n          } \n        }\n      },\n      {\n        _name: 'itunes:category',\n        _attrs: {\n          text: 'TV &amp; Film'\n        }\n      },\n      {\n        item: [\n          {title: 'Podcast Title'},\n          {'itunes:author': 'Author'},\n          {'itunes:subtitle': 'Subtitle'},\n          {'itunes:summary': 'Summary'},\n          {'itunes:image': 'image.jpg'},\n          {\n            _name: 'enclosure',\n            _attrs: {\n              url: 'http://example.com/podcast.m4a',\n              length: '8727310',\n              type: 'audio/x-m4a'\n            }\n          },\n          {guid: 'http://example.com/archive/aae20050615.m4a'},\n          {pubDate: 'Wed, 15 Jun 2011 19:00:00 GMT'},\n          {'itunes:duration': '7:04'},\n          {'itunes:keywords': 'salt, pepper, shaker, exciting'}\n        ]\n      },\n      {\n        item: [\n          {title: 'Podcast2 Title'},\n          {'itunes:author': 'Author2'},\n          {'itunes:subtitle': 'Subtitle2'},\n          {'itunes:summary': 'Summary2'},\n          {'itunes:image': 'image2.jpg'},\n          {\n            _name: 'enclosure',\n            _attrs: {\n              url: 'http://example.com/podcast2.m4a',\n              length: '655555',\n              type: 'audio/x-m4a'\n            }\n          },\n          {guid: 'http://example.com/archive/aae2.m4a'},\n          {pubDate: 'Wed, 15 Jul 2011 19:00:00 GMT'},\n          {'itunes:duration': '11:20'},\n          {'itunes:keywords': 'foo, bar'}\n        ]\n      }\n    ]\n  }\n}, {header: true, indent: '  '});\n```\n\nOutput:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\" version=\"2.0\">\n  <channel>\n    <title>Title</title>\n    <link>google.com</link>\n    <language>en-us</language>\n    <copyright>Copyright 2011</copyright>\n    <itunes:subtitle>Subtitle</itunes:subtitle>\n    <itunes:author>Author</itunes:author>\n    <itunes:summary>Summary</itunes:summary>\n    <description>Description</description>\n    <itunes:owner>\n      <itunes:name>Name</itunes:name>\n      <itunes:email>Email</itunes:email>\n    </itunes:owner>\n    <itunes:image href=\"image.jpg\"/>\n    <itunes:category text=\"Technology\">\n      <itunes:category text=\"Gadgets\"/>\n    </itunes:category>\n    <itunes:category text=\"TV &amp; Film\"/>\n    <item>\n      <title>Podcast Title</title>\n      <itunes:author>Author</itunes:author>\n      <itunes:subtitle>Subtitle</itunes:subtitle>\n      <itunes:summary>Summary</itunes:summary>\n      <itunes:image>image.jpg</itunes:image>\n      <enclosure url=\"http://example.com/podcast.m4a\" length=\"8727310\" type=\"audio/x-m4a\"/>\n      <guid>http://example.com/archive/aae20050615.m4a</guid>\n      <pubDate>Wed, 15 Jun 2011 19:00:00 GMT</pubDate>\n      <itunes:duration>7:04</itunes:duration>\n      <itunes:keywords>salt, pepper, shaker, exciting</itunes:keywords>\n    </item>\n    <item>\n      <title>Podcast2 Title</title>\n      <itunes:author>Author2</itunes:author>\n      <itunes:subtitle>Subtitle2</itunes:subtitle>\n      <itunes:summary>Summary2</itunes:summary>\n      <itunes:image>image2.jpg</itunes:image>\n      <enclosure url=\"http://example.com/podcast2.m4a\" length=\"655555\" type=\"audio/x-m4a\"/>\n      <guid>http://example.com/archive/aae2.m4a</guid>\n      <pubDate>Wed, 15 Jul 2011 19:00:00 GMT</pubDate>\n      <itunes:duration>11:20</itunes:duration>\n      <itunes:keywords>foo, bar</itunes:keywords>\n    </item>\n  </channel>\n</rss>\n```\n\n#### Example 11: Custom filter for XML entities, or whatever\n\n```javascript\njstoxml.toXML({\n\tfoo: '<a>',\n\tbar: '\"b\"',\n\tbaz: '\\'&whee\\''\n},\n{\n\tfilter: {\n\t\t'<': '&lt;', \n\t\t'>': '&gt;',\n\t\t'\"': '&quot;',\n\t\t'\\'': '&apos;',\n\t\t'&': '&amp;'\n\t}\n});\n```\n\nOutput:\n\n```\n<foo>&lt;a&gt;</foo><bar>&quot;b&quot;</bar><baz>&apos;&amp;whee&apos;</baz>\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/davidcalhoun/jstoxml/issues"
  },
  "_id": "jstoxml@0.1.0",
  "dist": {
    "shasum": "a32024d414d88f9a55389af8072ce74f2aec174d"
  },
  "_from": "jstoxml@0.1.x",
  "_resolved": "https://registry.npmjs.org/jstoxml/-/jstoxml-0.1.0.tgz"
}
